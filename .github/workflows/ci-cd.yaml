name: Alpha Platform CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Run tests and linting
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - agent-service
          - prompt-service
          - memory-service
          - tools-service
          - dashboard
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        if: ${{ matrix.service == 'agent-service' || matrix.service == 'prompt-service' || matrix.service == 'dashboard' }}
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json
      
      - name: Set up Python
        if: ${{ matrix.service == 'memory-service' || matrix.service == 'tools-service' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: ${{ matrix.service }}/requirements.txt
      
      - name: Install dependencies (Node.js)
        if: ${{ matrix.service == 'agent-service' || matrix.service == 'prompt-service' || matrix.service == 'dashboard' }}
        working-directory: ${{ matrix.service }}
        run: |
          # Install build dependencies for sqlite3
          if [[ "${{ matrix.service }}" == "agent-service" || "${{ matrix.service }}" == "prompt-service" ]]; then
            sudo apt-get update
            sudo apt-get install -y python3 build-essential
            # Use npm install for services using sqlite3 to ensure package-lock.json is updated
            npm install
          else
            # Use npm ci for other services
            npm ci
          fi
      
      - name: Install dependencies (Python)
        if: ${{ matrix.service == 'memory-service' || matrix.service == 'tools-service' }}
        working-directory: ${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8
      
      - name: Run linting (Node.js)
        if: ${{ matrix.service == 'agent-service' || matrix.service == 'prompt-service' || matrix.service == 'dashboard' }}
        working-directory: ${{ matrix.service }}
        run: npm run lint
      
      - name: Run linting (Python)
        if: ${{ matrix.service == 'memory-service' || matrix.service == 'tools-service' }}
        working-directory: ${{ matrix.service }}
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run tests (Node.js)
        if: ${{ matrix.service == 'agent-service' || matrix.service == 'prompt-service' || matrix.service == 'dashboard' }}
        working-directory: ${{ matrix.service }}
        run: npm test
      
      - name: Run tests (Python)
        if: ${{ matrix.service == 'memory-service' || matrix.service == 'tools-service' }}
        working-directory: ${{ matrix.service }}
        run: pytest

  # Notification that tests passed
  notify-success:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Set environment variables
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "ENV_NAME=production" >> $GITHUB_ENV
          else
            echo "ENV_NAME=development" >> $GITHUB_ENV
          fi
      
      - name: Notification
        run: |
          echo "âœ… All tests have passed! Changes are being deployed to ${{ env.ENV_NAME }} environment."
          echo "Render.com will automatically deploy the services from your GitHub repository."
          echo "Check your Render.com dashboard for deployment status."
